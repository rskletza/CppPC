1.1

- not apparent whether a "day" is a date or a day of the week

- not clear what auto will resolve to --> make function name implicate type?

- maybe make function template that will return a string for .day_of_the_week<String>() and an int for .day_of_the_week<int>
	- seems kind of cumbersome and not very logical though
	- however, it forces the programmer to actually think about what they want --> fewer compiler errors

1.2

i. No compiler errors. 

ii.
default constructor 
--> compiler error because there is no explicitly declared default constructor and the constructor with the int argument prevents the implicit default constructor from being declared

assignment constructor
--> 4 (parameter passed during construction)

implicitly-declared copy assignment (implicitly declared because no user-defined copy assignment operators are provided)
--> 4 (assigned correctly from s2)

assignment constructor
--> true (== is defined correctly)
--> compiler error, != is not defined because not declared and not implicitly declarable

iii.
SurpriseSemantics only has basic members, so it does not require a custom destructor, or custom copy/assignment constructors. It should implement the rule of zero, meaning that it should not have a custom copy constructor. This only works as long as the class does not own complex types with ownership that have to be managed in a non-default way.

iv.
The function print_surprise passes its argument as const. However, the member function value() is not declared as a const function which evokes a compiler error. If a modifying call of value() is desired, another value() function that is const needs to be declared (int value() const).

1.3
It is possible that log_reader.lines().size() throws an error. If this is the case, the destructor of log_reader needs to be called correctly, otherwise there will be a memory leak. 

A concept that must be fulfilled for this to work is RAII (Resource Allocation is Initialization). If allocated memory was not initialized then there would be no way to release it in the case of an error. If it is initialized, the destructor is called in the case of an error and the memory is released. //TODO technique versus rule?

2.1
The problem is the type of access used in the function (it+1). This is random access and only supplied by RandomAccessIterators and not by all others (Bidirectional, Forward, Input). In order to make the function work for all iterators, it's necessary to use ++i.

2.2

